
#include <pickup_system\core>
#include <building_system\core>
#include <player_system\core>

#include <YSI_Coding\y_hooks>

#define CHOPSHOP_X						(2771.7817)
#define CHOPSHOP_Y						(-1606.4154)
#define CHOPSHOP_Z						(10.9219)
#define PRICE_PER_MECHANICAL_COMPONENT  (15)

static const MATERIALS_PER_REPAIR = 2;
static const MATERIALS_PER_SPRAY = 3;

hook OnCharacterTryBuy(playerid)
{
    new id, E_ELEMENT_TYPE:type;
    if(Character_GetNearestPickup(playerid, id, type) && type == ELEMENT_TYPE_CHOPSHOP)
    {
        Garage_BuyMechanicalComponents(playerid);
    }
    return 1;
}

flags:gcmds(CMD_USER);
CMD:gcmds(playerid, params[])
{
    SendClientMessage(playerid, -1, "[GARAGE]: /ripara - /vernicia");
    SendClientMessage(playerid, -1, "Ricorda che puoi acquistare materiali meccanici ad un qualsiasi Chopshop.");
    return 1;
}
alias:gcmds("gcmd");

flags:ripara(CMD_ALIVE_USER);
CMD:ripara(playerid, params[])
{
    if(!Character_HasGarage(playerid))
        return SendClientMessage(playerid, COLOR_ERROR, "Devi possedere un garage per utilizzare questo comando.");

    if(!Character_CanUseGarage(playerid))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei nei pressi del tuo garage.");

    if(Character_GetItemAmount(playerid, gItem_MechanicalComponents) < MATERIALS_PER_REPAIR)
        return SendClientMessage(playerid, COLOR_ERROR, "Non hai abbastanza materiali meccanici per utilizzare questo comando.");

    new id, price;
    if(sscanf(params, "k<u>d", id, price))
    {
        SendClientMessage(playerid, COLOR_ERROR, "/ripara <playerid/partofname/#id> <prezzo>");
        return SendClientMessage(playerid, COLOR_GREY, "Utilizza il tuo id/nome per riparare il tuo veicolo.");
    }

    if(!IsPlayerConnected(id) || !Character_IsLogged(id))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non è collegato.");

    if(!IsPlayerInRangeOfPlayer(playerid, id, 5.0))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei vicino al giocatore.");
    
    new vehicleid = GetPlayerVehicleID(id);
    
    if(vehicleid <= 0 || !IsValidVehicle(vehicleid))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non è a bordo di un veicolo.");
    
    if(price > Character_GetMoney(id))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non ha abbastanza soldi.");

    if(id == playerid)
    {
        vehicleid = GetPlayerVehicleID(playerid);
        
        if(!Vehicle_IsValid(vehicleid))
            return SendClientMessage(playerid, COLOR_ERROR, "Non sei a bordo di un veicolo.");
        
        Character_DecreaseItemAmount(playerid, gItem_MechanicalComponents, MATERIALS_PER_REPAIR);

        SendClientMessage(playerid, COLOR_GREEN, "Hai riparato il tuo veicolo.");
        Vehicle_Repair(vehicleid);
    }
    else
    {
        Character_SetRequest(playerid, id, REQUEST_TYPE_REPAIR, 0, price);

        SendFormattedMessage(id, COLOR_RECEIVE_REQUEST, "%s vuole riparare il tuo veicolo (%s) per $%d.", Character_GetRolePlayName(playerid), Vehicle_GetName(vehicleid), price);
        SendClientMessage(id, COLOR_RECEIVE_REQUEST, "Digita \"/accetta riparazione\" per accettare o \"/rifiuta riparazione\" per rifiutare.");
        
        SendFormattedMessage(playerid, COLOR_SEND_REQUEST, "Hai inviato la richiesta di riparazione a %s per $%d. Usa \"annulla riparazione\" per annullare.", Character_GetRolePlayName(id), price);
    }
    return 1;
}

flags:vernicia(CMD_ALIVE_USER);
CMD:vernicia(playerid, params[])
{
    if(!Character_HasGarage(playerid))
        return SendClientMessage(playerid, COLOR_ERROR, "Devi possedere un garage per utilizzare questo comando.");

    if(!Character_CanUseGarage(playerid))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei nei pressi del tuo garage.");

    if(Character_GetItemAmount(playerid, gItem_MechanicalComponents) < MATERIALS_PER_SPRAY)
        return SendClientMessage(playerid, COLOR_ERROR, "Non hai abbastanza materiali meccanici per utilizzare questo comando.");
    
    new id, price, color1, color2;
    if(sscanf(params, "dddd", id, price, color1, color2))
    {
        SendClientMessage(playerid, COLOR_ERROR, "/vernicia <playerid/partofname/#id> <prezzo> <colore 1> <colore 2>");
        return SendClientMessage(playerid, COLOR_GREY, "Utilizza il tuo id/nome per riverniciare il tuo veicolo.");
    }
    
    if(color1 < 0 || color1 > 255 || color2 < 0 || color2 > 255)
        return SendClientMessage(playerid, COLOR_ERROR, "Uno o più colori inseriti non sono validi.");

    if(!IsPlayerConnected(id) || !Character_IsLogged(id))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non è collegato.");

    if(!IsPlayerInRangeOfPlayer(playerid, id, 5.0))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei vicino al giocatore.");
    
    new vehicleid = GetPlayerVehicleID(id);
    
    if(vehicleid <= 0 || !IsValidVehicle(vehicleid))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non è a bordo di un veicolo.");
    
    if(price > Character_GetMoney(id))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non ha abbastanza soldi.");

    if(id == playerid)
    {
        vehicleid = GetPlayerVehicleID(playerid);
        
        if(!Vehicle_IsValid(vehicleid))
            return SendClientMessage(playerid, COLOR_ERROR, "Non sei a bordo di un veicolo.");
        
        Character_DecreaseItemAmount(playerid, gItem_MechanicalComponents, MATERIALS_PER_SPRAY);
        SendClientMessage(playerid, COLOR_GREEN, "Hai riverniciato il tuo veicolo.");

        Vehicle_SetColors(vehicleid, color1, color2);
    }
    else
    {
        Character_SetRequest(playerid, id, REQUEST_TYPE_VEHICLE_SPRAY, color1, price, color2);

        SendFormattedMessage(id, COLOR_RECEIVE_REQUEST, "%s vuole verniciare il tuo veicolo (%s) per $%d.", Character_GetRolePlayName(playerid), Vehicle_GetName(vehicleid), price);
        SendClientMessage(id, COLOR_RECEIVE_REQUEST, "Digita \"/accetta verniciatura\" per accettare o \"/rifiuta verniciatura\" per rifiutare.");
        
        SendFormattedMessage(playerid, COLOR_SEND_REQUEST, "Hai inviato la richiesta di verniciatura a %s per $%d.", Character_GetRolePlayName(id), price);
    }
    return 1;
}

stock Character_AcceptVehicleSpray(playerid)
{
    if(!Request_IsPending(playerid, REQUEST_TYPE_VEHICLE_SPRAY))
        return SendClientMessage(playerid, COLOR_ERROR, "Non hai una richiesta di riverniciatura attiva."), 0;
    if(!IsPlayerInRangeOfPlayer(playerid, Request_GetSender(playerid, REQUEST_TYPE_VEHICLE_SPRAY), 5.0))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei vicino al giocatore."), 0;
    
    new senderid = Request_GetSender(playerid, REQUEST_TYPE_VEHICLE_SPRAY),
        color1 = Request_GetItem(playerid, REQUEST_TYPE_VEHICLE_SPRAY),
        color2 = Request_GetSlot(playerid, REQUEST_TYPE_VEHICLE_SPRAY),
        price = Request_GetAmount(playerid, REQUEST_TYPE_VEHICLE_SPRAY),
        vehicleid = GetPlayerVehicleID(playerid)
    ;

    if(!Character_CanInteract(senderid))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non puo' riverniciarti il veicolo al momento.");

    Character_GiveMoney(playerid, -price, "spray");
    Character_GiveMoney(senderid, price, "spray");
    Character_DecreaseItemAmount(senderid, gItem_MechanicalComponents, MATERIALS_PER_SPRAY);
    
    SendFormattedMessage(senderid, COLOR_ACCEPT_REQUEST, "%s ha accettato la tua richiesta di verniciatura. Hai guadagnato $%d.", Character_GetRolePlayName(playerid), price);
    SendFormattedMessage(senderid, COLOR_ACCEPT_REQUEST, "La verniciatura ti è costata: %d materiali meccanici.", MATERIALS_PER_SPRAY);
    SendFormattedMessage(playerid, COLOR_ACCEPT_REQUEST, "%s ha verniciato il tuo veicolo (%s) per $%d.", Character_GetRolePlayName(senderid), Vehicle_GetName(vehicleid), price);
    
    Vehicle_SetColors(vehicleid, color1, color2);

    Request_Reset(playerid, REQUEST_TYPE_VEHICLE_SPRAY);
    Request_Reset(senderid, REQUEST_TYPE_VEHICLE_SPRAY);
    return 1;
}

stock Character_AcceptRepair(playerid)
{
    if(!Request_IsPending(playerid, REQUEST_TYPE_REPAIR))
        return SendClientMessage(playerid, COLOR_ERROR, "Non hai una richiesta di riparazione attiva."), 0;
    
    if(!IsPlayerInRangeOfPlayer(playerid, Request_GetSender(playerid, REQUEST_TYPE_REPAIR), 5.0))
        return SendClientMessage(playerid, COLOR_ERROR, "Non sei vicino al giocatore."), 0;


    new senderid = Request_GetSender(playerid, REQUEST_TYPE_REPAIR),
        price = Request_GetAmount(playerid, REQUEST_TYPE_REPAIR),
        vehicleid = GetPlayerVehicleID(playerid)
    ;

    if(!Character_CanInteract(senderid))
        return SendClientMessage(playerid, COLOR_ERROR, "Il giocatore non puo' ripararti il veicolo al momento.");

    Character_GiveMoney(playerid, -price, "repair");
    Character_GiveMoney(senderid, price, "repair");

    Character_DecreaseItemAmount(senderid, gItem_MechanicalComponents, MATERIALS_PER_REPAIR);
    
    SendFormattedMessage(senderid, COLOR_ACCEPT_REQUEST, "%s ha accettato la tua richiesta di riparazione. Hai guadagnato $%d.", Character_GetRolePlayName(playerid), price);
    SendFormattedMessage(senderid, COLOR_ACCEPT_REQUEST, "La riparazione ti è costata: %d materiali meccanici.", MATERIALS_PER_REPAIR);

    SendFormattedMessage(playerid, COLOR_ACCEPT_REQUEST, "%s ha riparato il tuo veicolo (%s) per $%d.", Character_GetRolePlayName(senderid), Vehicle_GetName(vehicleid), price);

    Vehicle_Repair(vehicleid);

    Request_Reset(playerid, REQUEST_TYPE_REPAIR);
    Request_Reset(senderid, REQUEST_TYPE_REPAIR);
    return 1;
}

stock Garage_BuyMechanicalComponents(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, CHOPSHOP_X, CHOPSHOP_Y, CHOPSHOP_Z))
		return SendClientMessage(playerid, COLOR_ERROR, "Non sei nei pressi di un Chopshop.");
    return Dialog_Show(playerid, Dialog_BuyMechComponents, DIALOG_STYLE_INPUT, "Acquista", "Inserisci la quantità di materiali meccanici che vuoi acquistare.\nCosto per prezzo: $%d.", "Acquista", "Chiudi", PRICE_PER_MECHANICAL_COMPONENT);
}

Dialog:Dialog_BuyMechComponents(playerid, response, listitem, inputtext[])
{
    if(!response)
        return 0;
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, CHOPSHOP_X, CHOPSHOP_Y, CHOPSHOP_Z))
		return SendClientMessage(playerid, COLOR_ERROR, "Non sei nei pressi di un Chopshop.");
    new val = strval(inputtext);
    if(val <= 0)
        return Dialog_Show(playerid, Dialog_BuyMechComponents, DIALOG_STYLE_INPUT, "Acquista", "{FF0000}La quantità inserita non è valida.{FFFFFF}\nInserisci la quantità di materiali meccanici che vuoi acquistare.\nCosto per prezzo: $%d.", "Acquista", "Chiudi", PRICE_PER_MECHANICAL_COMPONENT);
    new price = PRICE_PER_MECHANICAL_COMPONENT * val;
    if(price > Character_GetMoney(playerid))
        return Dialog_Show(playerid, Dialog_BuyMechComponents, DIALOG_STYLE_INPUT, "Acquista", "{FF0000}Non hai abbastanza soldi per acquistare %d materiali.{FFFFFF}\nInserisci la quantità di materiali meccanici che vuoi acquistare.\nCosto per prezzo: $%d.", "Acquista", "Chiudi", val, PRICE_PER_MECHANICAL_COMPONENT);
    new result = Character_GiveItem(playerid, gItem_MechanicalComponents, val, 0, true);
    if(result == INVENTORY_NO_SPACE)
        return Dialog_Show(playerid, Dialog_BuyMechComponents, DIALOG_STYLE_INPUT, "Acquista", "{FF0000}Non hai abbastanza spazio per %d materiali.{FFFFFF}\nInserisci la quantità di materiali meccanici che vuoi acquistare.\nCosto per prezzo: $%d.", "Acquista", "Chiudi", val, PRICE_PER_MECHANICAL_COMPONENT);
    Character_GiveMoney(playerid, -price, "chop_shop_mats");
    SendFormattedMessage(playerid, -1, "Hai acquistato %d materiali per $%d.", val, price);
    return 1;
}

stock bool:Character_HasGarage(playerid)
{
    new List:list = Character_GetBuildingsByType(playerid, E_BUILDING_TYPE:BUILDING_TYPE_GARAGE);
    return list_valid(list) && list_size(list) > 0;
}

stock bool:Character_CanUseGarage(playerid)
{
    new List:list = Character_GetBuildingsByType(playerid, E_BUILDING_TYPE:BUILDING_TYPE_GARAGE);
    if(!list_valid(list) || list_size(list) <= 0)
        return false;
    
    new garageid, Float:x, Float:y, Float:z;
    for_list(i : list)
    {
        garageid = iter_get(i);
        if(Character_GetNearBuildingID(playerid) == garageid)
            return true;
        Building_GetEnterPos(garageid, x, y, z);
        if(GetPlayerDistanceFromPoint(playerid, x, y, z) <= 25.0)
            return true;
    }

    return false;
}

hook function Character_Enter(playerid)
{
    new elementid, E_ELEMENT_TYPE:type;
    Character_GetNearestPickup(playerid, elementid, type);
    if(type != ELEMENT_TYPE_BUILDING_ENTRANCE)
        return continue(playerid);
    
    if(Building_GetType(elementid) != BUILDING_TYPE_GARAGE)
        return continue(playerid);
    
    
    new vehicleid = GetPlayerVehicleID(playerid);
    new Float:range = Vehicle_IsValid(vehicleid) ? 7.0 : 1.5;
    
    if(!Building_IsValid(elementid))
    {
        new 
            buildingid = 0,
            Float:x, Float:y, Float:z;
        for_map(i : GetBuildingsMap())
        {
            buildingid = iter_get_key(i);
            Building_GetEnterPos(buildingid, x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
            {
                elementid = buildingid;
                break;
            }
        }
    }

    if(Building_IsValid(elementid))
    {
        if(vehicleid > 0 && GetPlayerVehicleSeat(playerid) != 0)
            return SendClientMessage(playerid, COLOR_ERROR, "Devi essere il guidatore per poter entrare all'interno dell'edificio.");
        
        if(Building_IsLocked(elementid))
		    return GameTextForPlayer(playerid, "~r~Chiuso", 5000, 1);
        
        new interiorid = Building_GetExitInterior(elementid);
        new worldid = Building_GetExitWorld(elementid);
        new Float:x, Float:y, Float:z;
        Building_GetExitPos(elementid, x, y, z);
        if(vehicleid > 0)
        {
            LinkVehicleToInterior(vehicleid, interiorid);
            SetVehicleVirtualWorld(vehicleid, worldid);
            SetVehiclePos(vehicleid, x, y, z);
            foreach(new p : Player)
            {
                if(p == playerid || GetPlayerVehicleID(p) != vehicleid) 
                    continue;
                
                Character_SetVirtualWorld(p, worldid);
                SetPlayerInterior(p, interiorid);
            }
        }
        else
        {
            Character_SetSafePosition(playerid, x, y, z, interiorid, worldid);
        }
        SetPlayerInterior(playerid, interiorid);
        Character_SetVirtualWorld(playerid, worldid);

        CallLocalFunction(#OnPlayerEnterBuilding, "dd", playerid, elementid);
        return 1;
    }
    return continue(playerid);
}